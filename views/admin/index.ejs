<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Order Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .status-badge {
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.8em;
            font-weight: bold;
        }
        .status-received { background-color: #ffd700; }
        .status-printing { background-color: #87ceeb; }
        .status-packaging { background-color: #98fb98; }
        .status-completed { background-color: #90ee90; }
    </style>
</head>
<body>
    <%- include('layout', {
        title: 'Order Management',
        path: '/admin',
        style: `
            <style>
                .status-badge {
                    padding: 5px 10px;
                    border-radius: 15px;
                    font-size: 0.8em;
                    font-weight: bold;
                }
                .status-received { background-color: #ffd700; }
                .status-printing { background-color: #87ceeb; }
                .status-packaging { background-color: #98fb98; }
                .status-completed { background-color: #90ee90; }
            </style>
        `,
        body: `
            <!-- Order Management Content -->
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title">Order List</h5>
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createOrderModal">
                            <i class="fas fa-plus"></i> Create Order
                        </button>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer Name</th>
                                    <th>Project Details</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="orderTableBody">
                                <!-- Orders will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center" id="pagination">
                            <!-- Pagination will be loaded here -->
                        </ul>
                    </nav>
                </div>
            </div>

            <!-- Create Order Modal -->
            <div class="modal fade" id="createOrderModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Create New Order</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <form id="createOrderForm">
                                <div class="mb-3">
                                    <label for="customerName" class="form-label">Customer Name</label>
                                    <input type="text" class="form-control" id="customerName" required>
                                </div>
                                <div class="mb-3">
                                    <label for="projectDetails" class="form-label">Project Details</label>
                                    <textarea class="form-control" id="projectDetails" rows="3" required></textarea>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="createOrder()">Create</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Order Modal -->
            <div class="modal fade" id="editOrderModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Edit Order</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <form id="editOrderForm">
                                <input type="hidden" id="editOrderId">
                                <div class="mb-3">
                                    <label for="editCustomerName" class="form-label">Customer Name</label>
                                    <input type="text" class="form-control" id="editCustomerName" required>
                                </div>
                                <div class="mb-3">
                                    <label for="editProjectDetails" class="form-label">Project Details</label>
                                    <textarea class="form-control" id="editProjectDetails" rows="3" required></textarea>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="updateOrder()">Update</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Delete Confirmation Modal -->
            <div class="modal fade" id="deleteOrderModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Delete Order</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this order? This action cannot be undone.</p>
                            <input type="hidden" id="deleteOrderId">
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-danger" onclick="deleteOrder()">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        `,
        script: `
            <script>
                let currentPage = 1;
                const ordersPerPage = 5;

                function getActionButtons(status, orderId) {
                    const buttons = [];
                    
                    // Edit button
                    buttons.push(\`
                        <button class="btn btn-sm btn-primary me-1" onclick="openEditModal('\${orderId}')">
                            <i class="fas fa-edit"></i>
                        </button>
                    \`);

                    // Delete button
                    buttons.push(\`
                        <button class="btn btn-sm btn-danger me-1" onclick="openDeleteModal('\${orderId}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    \`);

                    // Status transition buttons
                    switch(status) {
                        case 'received':
                            buttons.push(\`
                                <button class="btn btn-sm btn-info" onclick="updateStatus('\${orderId}', 'printing')">
                                    Start Printing
                                </button>
                            \`);
                            break;
                        case 'printing':
                            buttons.push(\`
                                <button class="btn btn-sm btn-info" onclick="updateStatus('\${orderId}', 'packaging')">
                                    Start Packaging
                                </button>
                            \`);
                            break;
                        case 'packaging':
                            buttons.push(\`
                                <button class="btn btn-sm btn-success" onclick="updateStatus('\${orderId}', 'completed')">
                                    Complete Order
                                </button>
                            \`);
                            break;
                    }
                    
                    return buttons.join('');
                }

                async function loadOrders() {
                    try {
                        const response = await fetch('/api/orders');
                        if (!response.ok) throw new Error('Failed to fetch orders');
                        
                        const orders = await response.json();
                        const start = (currentPage - 1) * ordersPerPage;
                        const end = start + ordersPerPage;
                        const pageOrders = orders.slice(start, end);
                        
                        const tbody = document.getElementById('orderTableBody');
                        tbody.innerHTML = pageOrders.map(order => \`
                            <tr>
                                <td>\${order.id}</td>
                                <td>\${order.customer_name}</td>
                                <td>\${order.project_details}</td>
                                <td><span class="status-badge status-\${order.status.toLowerCase()}">\${order.status}</span></td>
                                <td>\${getActionButtons(order.status.toLowerCase(), order.id)}</td>
                            </tr>
                        \`).join('');
                        
                        updatePagination(Math.ceil(orders.length / ordersPerPage));
                    } catch (error) {
                        console.error('Error loading orders:', error);
                        alert('Failed to load orders. Please try again.');
                    }
                }

                async function createOrder() {
                    const customerName = document.getElementById('customerName').value;
                    const projectDetails = document.getElementById('projectDetails').value;

                    if (!customerName || !projectDetails) {
                        alert('Please fill in all fields');
                        return;
                    }

                    try {
                        const response = await fetch('/api/orders', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                customer_name: customerName,
                                project_details: projectDetails
                            })
                        });

                        if (!response.ok) throw new Error('Failed to create order');

                        document.getElementById('createOrderForm').reset();
                        bootstrap.Modal.getInstance(document.getElementById('createOrderModal')).hide();
                        loadOrders();
                    } catch (error) {
                        console.error('Error creating order:', error);
                        alert('Failed to create order. Please try again.');
                    }
                }

                async function openEditModal(orderId) {
                    try {
                        const response = await fetch(\`/api/orders/\${orderId}\`);
                        if (!response.ok) throw new Error('Failed to fetch order');
                        
                        const order = await response.json();
                        document.getElementById('editOrderId').value = order.id;
                        document.getElementById('editCustomerName').value = order.customer_name;
                        document.getElementById('editProjectDetails').value = order.project_details;
                        
                        new bootstrap.Modal(document.getElementById('editOrderModal')).show();
                    } catch (error) {
                        console.error('Error fetching order:', error);
                        alert('Failed to load order details. Please try again.');
                    }
                }

                async function updateOrder() {
                    const orderId = document.getElementById('editOrderId').value;
                    const customerName = document.getElementById('editCustomerName').value;
                    const projectDetails = document.getElementById('editProjectDetails').value;

                    if (!customerName || !projectDetails) {
                        alert('Please fill in all fields');
                        return;
                    }

                    try {
                        const response = await fetch(\`/api/orders/\${orderId}\`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                customer_name: customerName,
                                project_details: projectDetails
                            })
                        });

                        if (!response.ok) throw new Error('Failed to update order');

                        bootstrap.Modal.getInstance(document.getElementById('editOrderModal')).hide();
                        loadOrders();
                    } catch (error) {
                        console.error('Error updating order:', error);
                        alert('Failed to update order. Please try again.');
                    }
                }

                function openDeleteModal(orderId) {
                    document.getElementById('deleteOrderId').value = orderId;
                    new bootstrap.Modal(document.getElementById('deleteOrderModal')).show();
                }

                async function deleteOrder() {
                    const orderId = document.getElementById('deleteOrderId').value;

                    try {
                        const response = await fetch(\`/api/orders/\${orderId}\`, {
                            method: 'DELETE'
                        });

                        if (!response.ok) throw new Error('Failed to delete order');

                        bootstrap.Modal.getInstance(document.getElementById('deleteOrderModal')).hide();
                        loadOrders();
                    } catch (error) {
                        console.error('Error deleting order:', error);
                        alert('Failed to delete order. Please try again.');
                    }
                }

                async function updateStatus(orderId, newStatus) {
                    try {
                        const response = await fetch(\`/api/orders/\${orderId}\`, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ status: newStatus })
                        });

                        if (!response.ok) throw new Error('Failed to update status');

                        loadOrders();
                    } catch (error) {
                        console.error('Error updating status:', error);
                        alert('Failed to update order status. Please try again.');
                    }
                }

                function updatePagination(totalPages) {
                    const pagination = document.getElementById('pagination');
                    pagination.innerHTML = \`
                        <li class="page-item \${currentPage === 1 ? 'disabled' : ''}">
                            <a class="page-link" href="#" onclick="changePage(\${currentPage - 1})">Previous</a>
                        </li>
                        \${Array.from({ length: totalPages }, (_, i) => i + 1).map(page => \`
                            <li class="page-item \${currentPage === page ? 'active' : ''}">
                                <a class="page-link" href="#" onclick="changePage(\${page})">\${page}</a>
                            </li>
                        \`).join('')}
                        <li class="page-item \${currentPage === totalPages ? 'disabled' : ''}">
                            <a class="page-link" href="#" onclick="changePage(\${currentPage + 1})">Next</a>
                        </li>
                    \`;
                }

                function changePage(page) {
                    if (page < 1) return;
                    currentPage = page;
                    loadOrders();
                }

                // Load orders when the page loads
                document.addEventListener('DOMContentLoaded', loadOrders);
            </script>
        `
    }) %>
</body>
</html>
