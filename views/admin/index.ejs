<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Order Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <%- include('layout', {
        title: 'Orders',
        path: '/admin',
        style: `
            <style>
                .status-badge {
                    padding: 5px 10px;
                    border-radius: 15px;
                    font-size: 0.8em;
                    font-weight: bold;
                    color: #000;
                }
                .status-received { background-color: #FFA500; }
                .status-settings { background-color: #FFD580; }
                .status-printing { background-color: #FFB6C1; }
                .status-releasing { background-color: #90EE90; }
                .status-billing { background-color: #228B22; color: white !important; }
                .status-finishing { background-color: #9370DB; color: white !important; }
                .status-void { background-color: #DC3545; color: white !important; }
                .status-completed { background-color: #32CD32; color: white !important; }

                .table-container {
                    height: auto;
                    overflow: visible !important;
                }

                .table-responsive {
                    overflow: visible !important;
                }

                .dropdown-menu {
                    padding: 0.5rem 0;
                    border: 1px solid rgba(0,0,0,.15);
                    border-radius: 0.375rem;
                    box-shadow: 0 0.5rem 1rem rgba(0,0,0,.15);
                    overflow: visible !important;
                }

                .dropdown-item {
                    padding: 0.5rem 1.5rem;
                    font-size: 0.875rem;
                    color: #212529;
                    transition: background-color 0.15s ease-in-out;
                }

                .dropdown-item:hover {
                    background-color: #f8f9fa;
                    color: #16181b;
                }

                @media (max-width: 768px) {
                    .mobile-text-small {
                        font-size: 0.8em;
                    }
                }
            </style>
        `,
        body: `
            <!-- Order Management Content -->
            <div class="card">
                <div class="card-body">
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-3 gap-2">
                        <h5 class="card-title mb-0">Order List</h5>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createOrderModal">
                            <i class="fas fa-plus"></i> Create Order
                        </button>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4 mb-2">
                            <div class="input-group">
                                <input type="text" class="form-control" id="searchJobOrder" placeholder="Search Job Order ID" onkeyup="applyFilters()">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                            </div>
                        </div>
                        <div class="col-md-4 mb-2">
                            <div class="input-group">
                                <input type="text" class="form-control" id="searchCustomer" placeholder="Search Customer Name" onkeyup="applyFilters()">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                            </div>
                        </div>
                        <div class="col-md-4 mb-2">
                            <div class="input-group">
                                <select class="form-select" id="sortBy" onchange="applyFilters()">
                                    <option value="">Sort By...</option>
                                    <option value="job_order_id">Job Order ID</option>
                                    <option value="customer_name">Customer Name</option>
                                    <option value="created_at">Date Created</option>
                                </select>
                                <button class="btn btn-outline-secondary" type="button" id="sortDirection" onclick="toggleSortDirection()">
                                    <i class="fas fa-sort-amount-down"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Job Order ID</th>
                                    <th>Customer</th>
                                    <th>Details</th>
                                    <th>Status</th>
                                    <th>Hide</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="orderTableBody"></tbody>
                        </table>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <span id="totalEntries"></span> entries
                        </div>
                        <div>
                            <select class="form-select" id="rowsPerPage" onchange="changeRowsPerPage()">
                                <option value="20">20 rows per page</option>
                                <option value="50">50 rows per page</option>
                                <option value="100">100 rows per page</option>
                            </select>
                        </div>
                    </div>
                    <nav>
                        <ul id="pagination" class="pagination justify-content-center"></ul>
                    </nav>
                </div>
            </div>

            <!-- Create Order Modal -->
            <div class="modal fade" id="createOrderModal" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Create Order</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="jobOrderId" class="form-label">Job Order ID</label>
                                <input type="text" class="form-control" id="jobOrderId">
                            </div>
                            <div class="mb-3">
                                <label for="customerName" class="form-label">Customer Name</label>
                                <input type="text" class="form-control" id="customerName">
                            </div>
                            <div class="mb-3">
                                <label for="projectDetails" class="form-label">Project Details</label>
                                <textarea class="form-control" id="projectDetails" rows="3"></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="createOrder()">Create</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Order Modal -->
            <div class="modal fade" id="editOrderModal" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Edit Order</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <input type="hidden" id="editOrderId">
                            <div class="mb-3">
                                <label for="editJobOrderId" class="form-label">Job Order ID</label>
                                <input type="text" class="form-control" id="editJobOrderId">
                            </div>
                            <div class="mb-3">
                                <label for="editCustomerName" class="form-label">Customer Name</label>
                                <input type="text" class="form-control" id="editCustomerName">
                            </div>
                            <div class="mb-3">
                                <label for="editProjectDetails" class="form-label">Project Details</label>
                                <textarea class="form-control" id="editProjectDetails" rows="3"></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="updateOrder()">Update</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Delete Confirmation Modal -->
            <div class="modal fade" id="deleteOrderModal" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Hide Order</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to hide this order?</p>
                            <input type="hidden" id="deleteOrderId">
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-danger" onclick="hideOrder()">Hide</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Void Order Modal -->
            <div class="modal fade" id="voidOrderModal" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Void Order</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to void this order? This action cannot be undone.</p>
                            <input type="hidden" id="voidOrderId">
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-warning" onclick="voidOrder()">Void Order</button>
                        </div>
                    </div>
                </div>
            </div>
        `,
        script: `
            <script>
                let currentPage = 1;
                let ordersPerPage = 20;
                let allOrders = [];
                let sortDirection = 'desc';

                function applyFilters() {
                    const jobOrderSearch = document.getElementById('searchJobOrder').value.toLowerCase().trim();
                    const customerSearch = document.getElementById('searchCustomer').value.toLowerCase().trim();
                    const sortBy = document.getElementById('sortBy').value;

                    let filteredOrders = [...allOrders];

                    // Apply search filters
                    if (jobOrderSearch) {
                        filteredOrders = filteredOrders.filter(order => 
                            (order.job_order_id || '').toLowerCase().includes(jobOrderSearch)
                        );
                    }

                    if (customerSearch) {
                        filteredOrders = filteredOrders.filter(order => 
                            order.customer_name.toLowerCase().includes(customerSearch)
                        );
                    }

                    // Apply sorting
                    if (sortBy) {
                        filteredOrders.sort((a, b) => {
                            let valueA = (a[sortBy] || '').toString().toLowerCase();
                            let valueB = (b[sortBy] || '').toString().toLowerCase();
                            
                            if (sortBy === 'created_at') {
                                valueA = new Date(valueA).getTime();
                                valueB = new Date(valueB).getTime();
                            }

                            if (sortDirection === 'asc') {
                                return valueA < valueB ? -1 : valueA > valueB ? 1 : 0;
                            } else {
                                return valueA > valueB ? -1 : valueA < valueB ? 1 : 0;
                            }
                        });
                    }

                    displayOrders(filteredOrders);
                }

                function toggleSortDirection() {
                    sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
                    const icon = document.querySelector('#sortDirection i');
                    icon.className = sortDirection === 'asc' ? 'fas fa-sort-amount-up' : 'fas fa-sort-amount-down';
                    applyFilters();
                }

                function changeRowsPerPage() {
                    ordersPerPage = parseInt(document.getElementById('rowsPerPage').value);
                    currentPage = 1;
                    applyFilters();
                }

                function displayOrders(orders) {
                    document.getElementById('totalEntries').textContent = orders.length;
                    
                    const start = (currentPage - 1) * ordersPerPage;
                    const end = start + ordersPerPage;
                    const pageOrders = orders.slice(start, end);
                    
                    const tbody = document.getElementById('orderTableBody');
                    tbody.innerHTML = pageOrders.map(order => \`
                        <tr>
                            <td class="mobile-text-small">#\${order.id}</td>
                            <td class="mobile-text-small">\${order.job_order_id || '-'}</td>
                            <td class="mobile-text-small">\${order.customer_name}</td>
                            <td class="mobile-text-small">\${order.project_details}</td>
                            <td>
                                <span class="status-badge status-\${order.status.toLowerCase()}">\${order.status.charAt(0).toUpperCase() + order.status.slice(1)}</span>
                                \${order.is_void ? '<span class="badge bg-danger ms-1">Void</span>' : ''}
                            </td>
                            <td class="mobile-text-small">\${order.is_hide ? 'True' : 'False'}</td>
                            <td>
                                <button class="btn btn-sm btn-primary" onclick="openEditModal('\${order.id}')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="openDeleteModal('\${order.id}')">
                                    <i class="fas fa-eye-slash"></i>
                                </button>
                                <button class="btn btn-sm btn-warning" onclick="openVoidModal('\${order.id}')">
                                    <i class="fas fa-ban"></i>
                                </button>
                                <div class="dropdown d-inline">
                                    <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        Status
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="#" onclick="updateStatus('\${order.id}', 'settings')">Settings</a></li>
                                        <li><a class="dropdown-item" href="#" onclick="updateStatus('\${order.id}', 'printing')">Printing</a></li>
                                        <li><a class="dropdown-item" href="#" onclick="updateStatus('\${order.id}', 'finishing')">Finishing</a></li>
                                        <li><a class="dropdown-item" href="#" onclick="updateStatus('\${order.id}', 'releasing')">Releasing</a></li>
                                        <li><a class="dropdown-item" href="#" onclick="updateStatus('\${order.id}', 'billing')">Billing</a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item" href="#" onclick="updateStatus('\${order.id}', 'completed')">Completed</a></li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    \`).join('');
                    
                    updatePagination(Math.ceil(orders.length / ordersPerPage));
                }

                async function loadOrders() {
                    try {
                        const response = await fetch('/api/orders');
                        if (!response.ok) throw new Error('Failed to fetch orders');
                        
                        allOrders = await response.json();
                        applyFilters();
                    } catch (error) {
                        console.error('Error loading orders:', error);
                        alert('Failed to load orders. Please try again.');
                    }
                }

                async function createOrder() {
                    const jobOrderId = document.getElementById('jobOrderId').value;
                    const customerName = document.getElementById('customerName').value;
                    const projectDetails = document.getElementById('projectDetails').value;

                    if (!jobOrderId || !customerName || !projectDetails) {
                        alert('Please fill in all fields');
                        return;
                    }

                    try {
                        const response = await fetch('/api/orders', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                job_order_id: jobOrderId,
                                customer_name: customerName,
                                project_details: projectDetails,
                                status: 'received'
                            })
                        });

                        const result = await response.json();

                        if (!response.ok) {
                            throw new Error(result.error || 'Failed to create order');
                        }

                        // Reset form
                        document.getElementById('jobOrderId').value = '';
                        document.getElementById('customerName').value = '';
                        document.getElementById('projectDetails').value = '';

                        // Close modal
                        bootstrap.Modal.getInstance(document.getElementById('createOrderModal')).hide();

                        // Refresh orders
                        loadOrders();
                    } catch (error) {
                        console.error('Error creating order:', error);
                        alert(error.message || 'Failed to create order. Please try again.');
                    }
                }

                async function openEditModal(orderId) {
                    try {
                        const response = await fetch('/api/orders/' + orderId);
                        if (!response.ok) throw new Error('Failed to fetch order');
                        
                        const order = await response.json();
                        
                        document.getElementById('editOrderId').value = order.id;
                        document.getElementById('editJobOrderId').value = order.job_order_id || '';
                        document.getElementById('editCustomerName').value = order.customer_name;
                        document.getElementById('editProjectDetails').value = order.project_details;
                        
                        new bootstrap.Modal(document.getElementById('editOrderModal')).show();
                    } catch (error) {
                        console.error('Error fetching order:', error);
                        alert('Failed to fetch order details. Please try again.');
                    }
                }

                async function updateOrder() {
                    const orderId = document.getElementById('editOrderId').value;
                    const jobOrderId = document.getElementById('editJobOrderId').value;
                    const customerName = document.getElementById('editCustomerName').value;
                    const projectDetails = document.getElementById('editProjectDetails').value;

                    if (!customerName || !projectDetails) {
                        alert('Please fill in all required fields');
                        return;
                    }

                    try {
                        const response = await fetch('/api/orders/' + orderId, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                job_order_id: jobOrderId,
                                customer_name: customerName,
                                project_details: projectDetails
                            })
                        });

                        const result = await response.json();

                        if (!response.ok) {
                            throw new Error(result.error || 'Failed to update order');
                        }

                        bootstrap.Modal.getInstance(document.getElementById('editOrderModal')).hide();
                        loadOrders();
                    } catch (error) {
                        console.error('Error updating order:', error);
                        alert(error.message || 'Failed to update order. Please try again.');
                    }
                }

                function openDeleteModal(orderId) {
                    document.getElementById('deleteOrderId').value = orderId;
                    new bootstrap.Modal(document.getElementById('deleteOrderModal')).show();
                }

                async function hideOrder() {
                    const orderId = document.getElementById('deleteOrderId').value;

                    try {
                        const response = await fetch('/api/orders/' + orderId, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ is_hide: true })
                        });

                        const result = await response.json();

                        if (!response.ok) {
                            throw new Error(result.error || 'Failed to hide order');
                        }

                        bootstrap.Modal.getInstance(document.getElementById('deleteOrderModal')).hide();
                        loadOrders();
                    } catch (error) {
                        console.error('Error hiding order:', error);
                        alert(error.message || 'Failed to hide order. Please try again.');
                    }
                }

                function openVoidModal(orderId) {
                    document.getElementById('voidOrderId').value = orderId;
                    new bootstrap.Modal(document.getElementById('voidOrderModal')).show();
                }

                async function voidOrder() {
                    const orderId = document.getElementById('voidOrderId').value;
                    try {
                        const response = await fetch('/api/orders/' + orderId, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ is_void: true })
                        });

                        const result = await response.json();
                        if (!response.ok) {
                            throw new Error(result.error || 'Failed to void order');
                        }

                        bootstrap.Modal.getInstance(document.getElementById('voidOrderModal')).hide();
                        loadOrders();
                    } catch (error) {
                        console.error('Error voiding order:', error);
                        alert(error.message || 'Failed to void order. Please try again.');
                    }
                }

                async function updateStatus(orderId, newStatus) {
                    try {
                        const response = await fetch('/api/orders/' + orderId, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ status: newStatus })
                        });

                        if (!response.ok) throw new Error('Failed to update status');
                        
                        loadOrders();
                    } catch (error) {
                        console.error('Error updating status:', error);
                        alert('Failed to update status. Please try again.');
                    }
                }

                async function updateShowStatus(orderId, isShow) {
                    try {
                        const response = await fetch('/api/orders/' + orderId, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ is_hide: !isShow })
                        });

                        if (!response.ok) throw new Error('Failed to update show status');
                        
                        loadOrders();
                    } catch (error) {
                        console.error('Error updating show status:', error);
                        alert('Failed to update show status. Please try again.');
                    }
                }

                function updatePagination(totalPages) {
                    const pagination = document.getElementById('pagination');
                    pagination.innerHTML = \`
                        <li class="page-item \${currentPage === 1 ? 'disabled' : ''}">
                            <a class="page-link" href="#" onclick="changePage(\${currentPage - 1})">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        </li>
                        \${Array.from({ length: totalPages }, (_, i) => i + 1).map(page => \`
                            <li class="page-item \${currentPage === page ? 'active' : ''}">
                                <a class="page-link" href="#" onclick="changePage(\${page})">\${page}</a>
                            </li>
                        \`).join('')}
                        <li class="page-item \${currentPage === totalPages ? 'disabled' : ''}">
                            <a class="page-link" href="#" onclick="changePage(\${currentPage + 1})">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    \`;
                }

                function changePage(page) {
                    if (page >= 1) {
                        currentPage = page;
                        applyFilters();
                    }
                }

                // Initial load
                loadOrders();
            </script>
        `
    }) %>
</body>
</html>
